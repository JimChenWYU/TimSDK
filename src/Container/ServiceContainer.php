<?php
/**
 * Created by PhpStorm.
 * User: lenovo
 * Date: 6/15/2018
 * Time: 9:33 AM
 */
namespace TimSDK\Container;

use TimSDK\Core\API;
use Pimple\Container;
use GuzzleHttp\Client;
use TimSDK\Foundation\Config;
use TimSDK\Foundation\Log\LogManager;
use Pimple\Exception\UnknownIdentifierException;
use TimSDK\Container\ServiceContainerInterface as ContainerContract;

/**
 * Class ServiceContainer
 * @property Config $config
 * @property LogManager $log
 * @property Client $httpClient
 * @package TimSDK\Container
 */
class ServiceContainer extends Container implements ContainerContract
{
    /**
     * @var static
     */
    protected static $instance;

    /**
     * Base path
     *
     * @var string
     */
    protected $basePath;

    /**
     * @var array
     */
    protected $defaultConfig = [];

    /**
     * @var array
     */
    protected $userConfig = [];

    /**
     * @var array
     */
    protected $providers = [
        //
    ];

    /**
     * @var array
     */
    protected $instances;

    /**
     * ServiceContainer constructor.
     *
     * @param array $config
     * @param array $prepends
     */
    public function __construct(array $config = [], array $prepends = [])
    {
        $this->userConfig = $config;

        $this->setBasePath(dirname(__DIR__));

        $this->registerBaseBindings();

        $this->registerProviders($this->getProviders());

        parent::__construct($prepends);
    }

    /**
     * Magic get access.
     *
     * @param string $id
     * @return mixed|null
     * @throws UnknownIdentifierException
     */
    public function __get($id)
    {
        return $this->offsetGet($id);
    }

    /**
     * Magic set access.
     *
     * @param string $id
     * @param mixed  $value
     */
    public function __set($id, $value)
    {
        $this->offsetSet($id, $value);
    }

    /**
     * Gets a parameter or an object.
     *
     * @param string $id The unique identifier for the parameter or object
     *
     * @return mixed The value of the parameter or an object
     *
     * @throws UnknownIdentifierException If the identifier is not defined
     */
    public function offsetGet($id)
    {
        if (isset($this->instances[$id])) {
            return $this->instances[$id];
        }

        return parent::offsetGet($id); // TODO: Change the autogenerated stub
    }

    /**
     * @param ServiceContainer $instance
     * @return ServiceContainer
     */
    public static function setInstance(ServiceContainer $instance = null)
    {
        return self::$instance = $instance;
    }

    /**
     * Set the globally available instance of the container.
     *
     * @return static
     */
    public static function getInstance()
    {
        if (is_null(static::$instance)) {
            static::$instance = new static;
        }
        return static::$instance;
    }

    /**
     * Register an existing instance as shared in the container.
     *
     * @param $abstract
     * @param $instance
     * @return mixed
     */
    public function instance($abstract, $instance)
    {
        $this->instances[$abstract] = $instance;

        return $instance;
    }

    /**
     * @param mixed $basePath
     */
    public function setBasePath($basePath)
    {
        $this->basePath = rtrim($basePath, DIRECTORY_SEPARATOR);

        $this->instance('path.base', $this->basePath());
        $this->instance('path.cert', $this->basePath('Cert'));
    }

    /**
     * Get the base path
     *
     * @param  string  $path Optionally, a path to append to the base path
     * @return string
     */
    public function basePath($path = '')
    {
        return $this->basePath.($path ? DIRECTORY_SEPARATOR.$path : $path);
    }

    /**
     * Get the version number of the application.
     *
     * @return string
     */
    public function version()
    {
        throw new \InvalidArgumentException('Unknow version.');
    }

    /**
     * @return array
     */
    public function getConfig()
    {
        $base = [
            // http://docs.guzzlephp.org/en/stable/request-options.html
            'http' => [
                'timeout' => 5.0,
                'base_uri' => API::BASE_URL,
            ],
        ];

        return array_replace_recursive($base, $this->defaultConfig, $this->userConfig);
    }

    /**
     * Register all providers
     * @param array $providers
     */
    public function registerProviders(array $providers)
    {
        foreach ($providers as $provider) {
            parent::register(new $provider());
        }
    }

    /**
     * Register the basic bindings into the container.
     *
     * @return void
     */
    public function registerBaseBindings()
    {
        self::setInstance($this);

        $this->instance(ServiceContainer::class, $this);

        $this->instance('app', $this);
    }

    /**
     * Get all providers
     *
     * @return array
     */
    public function getProviders()
    {
        return array_merge([
            \TimSDK\Foundation\ServiceProviders\ConfigServiceProvider::class,
            \TimSDK\Foundation\ServiceProviders\LogServiceProvider::class,
            \TimSDK\Foundation\ServiceProviders\HttpClientServiceProvider::class,
        ], $this->providers);
    }
}
